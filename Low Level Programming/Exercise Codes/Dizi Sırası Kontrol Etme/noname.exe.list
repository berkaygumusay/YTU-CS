EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe -- emu8086 assembler version: 4.08  
 
[ 15/11/2022  --  19:41:08 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       myStack segment para stack 'stack'
[   2]    0000: 00 00 00 00 00 00 00 00 00 00 00 00   dw  20  dup(?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[   3]        :                                       myStack ends
[   4]        :                                       
[   5]        :                                       myData segment para 'data'
[   6]    0030: 01 03 04 05 06 07 08 09 0A            dizi    db  1,3,4,5,6,7,8,9,10
[   7]    0039: 09 00                                 elemanSayisi   dw   9
[   8]    003B: 00                                    kontrol db  ?
[   9]    003C: 00                                    S       db  0
[  10]        :                                       myData ends
[  11]        :                                       
[  12]        :                                       myCode segment para 'code'
[  13]        :                                       assume cs:myCode,ss:myStack,ds:myData
[  14]    0040:                                       MAIN proc far
[  15]    0040: 1E                                    push ds
[  16]    0041: 33 C0                                 xor ax,ax
[  17]    0043: 50                                    push ax
[  18]    0044: B8 03 00                              mov ax,myData
[  19]    0047: 8E D8                                 mov ds,ax
[  20]    0049: 33 F6                                 xor SI,SI
[  21]    004B: BB 00 00                              mov bx,0
[  22]    004E: 8B 0E 09 00                           mov cx,elemanSayisi
[  23]    0052: 49                                    dec cx
[  24]    0053: 83 FB 00                              l1: cmp bx,0
[  25]    0056: 75 11                                 jne whileCikis
[  26]    0058: 3B F1                                 cmp SI,cx
[  27]    005A: 7D 0D                                 jge whileCikis
[  28]    005C: 8A 04                                 mov al,dizi[SI]
[  29]    005E: 3A 44 01                              cmp al,dizi[SI+1]
[  30]    0061: 7E 03                                 jle loopDevam
[  31]    0063: BB 01 00                              mov bx,1
[  32]    0066: 46                                    loopDevam:inc SI
[  33]    0067: E2 EA                                 loop l1
[  34]        :                                       
[  35]        :                                       
[  36]    0069: 83 FB 00                              whileCikis:cmp bx,0
[  37]    006C: 75 05                                 jne bitis
[  38]    006E: C6 06 0C 00 01                        mov S,1
[  39]        :                                       
[  40]        :                                       
[  41]        :                                       
[  42]        :                                       
[  43]    0073:                                       bitis:
[  44]    0073: CB                                    retf
[  45]        :                                       
[  46]        :                                       MAIN    endp
[  47]        :                                       myCode  ends
[  48]        :                                       end MAIN
[  49]        :                                       
[  50]        :                                       
[  51]        :                                       
[  52]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 74      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 28      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 06      -   check sum (l.byte)
0013: 1B      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 04      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 05      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 04      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
